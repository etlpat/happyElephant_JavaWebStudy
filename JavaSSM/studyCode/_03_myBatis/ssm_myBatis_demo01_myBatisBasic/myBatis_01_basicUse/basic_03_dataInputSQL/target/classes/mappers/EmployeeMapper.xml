<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
    MapperXML文件，与Mapper接口相对应，用于存放sql语句
    一个CRUD标签 -> 存放一条sql语句 -> 与Mapper接口的一个方法相对应
-->
<mapper namespace="com.etlpat.mapper.EmployeeMapper">

    <!--
        (1)区分 #{key} 和 ${key}
            ① #{key}：先变为占位符"?"，最后赋值。（安全）
                注意：Ⅰ 推荐使用#{key}占位符，因为可以防止注入攻击！
                     Ⅱ 占位符【只能替代值】！  e.g.允许(id=?)，不允许(?=3)

            ② ${key}：直接将字符串拼接。（不安全）
                注意：优先使用#{key}，若前者不能使用时（如key代表sql语句中的关键字），再使用${key}！
    -->
    <select id="queryByID" resultType="com.etlpat.pojo.Employee">
        SELECT emp_id AS empId, emp_name AS empName, emp_salary AS empSalary
        FROM t_emp WHERE emp_id = #{id};
    </select>


    <!--
        (2)数据输入
            ①数据输入的概念
                已知：一个mapper接口中的方法，唯一对应一条mapperXML文件中的sql语句。
                数据输入：把mapper接口中方法的参数，传给mapperXML中对应的sql语句。
                e.g. 接口中定义方法 Employee queryByID(int id) -> sql语句中使用 #{id} 接收方法参数。

            ②输入数据的分类
                输入的数据分为：简单类型 / 复杂类型
                Ⅰ简单类型：只包含一个值的数据类型
                    -基本类型：int、byte、short、double、……
                    -包装类型：Integer、Character、Double、……
                    -字符串：String
                Ⅱ复杂类型：包含多个值的数据类型
                    -实体类：Employee、Department、……
                    -集合类型：List、Set、Map、……
                    -数组类型：int[]、String[]、……
                    -复合类型：List<Employee>、实体类中包含集合……
    -->
    <!--
        (2.1)单个简单类型传参
            传入单个简单类型，#{}中的key可以随意命名！
            注意：虽然无论key取什么名，都可以接收参数；但是key的取名建议和参数名相同！
    -->
    <select id="queryBySalary" resultType="com.etlpat.pojo.Employee">
        SELECT emp_id AS empId, emp_name AS empName, emp_salary AS empSalary
        FROM t_emp WHERE emp_salary = #{salary};
    </select>


    <!--
        (2.2)单个实体对象传参
            传入单个实体对象，#{}中的key = 实体对象的属性名！
    -->
    <insert id="insertEmployee">
        INSERT INTO t_emp(emp_name,emp_salary)
        VALUES(#{empName}, #{empSalary});
    </insert>


    <!--
        (2.3)多个简单类型传参
            当传入多个简单类型：
                方案1：@Param注解【推荐】
                    首先 在方法的参数列表中，使用 @Param("keyName") 注解指定参数名。
                    之后 在sql语句中：#{}中的key = @Param指定的keyName！

                方案2：MyBatis的参数默认值
                    ①形参从左到右依次对应：arg0, arg1,...
                    ②形参从左到右依次对应：param1, param2,...
    -->
    <select id="queryByNameAndSalary" resultType="com.etlpat.pojo.Employee">
        SELECT emp_id AS empId, emp_name AS empName, emp_salary AS empSalary
        FROM t_emp WHERE emp_name = #{pName} AND emp_salary = #{pSalary};
    </select>


    <!--
        (2.4)单个Map类型传参
            传入单个Map类型：#{map的Key} = map的Value
    -->
    <insert id="insertMapEmp">
        INSERT INTO t_emp(emp_name,emp_salary)
        VALUES(#{name}, #{salary});
    </insert>

</mapper>