
（1）myBatis-plus核心注解介绍
    MyBatis-Plus是一个基于MyBatis框架的增强工具，提供了一系列简化和增强的功能，用于加快开发人员在使用MyBatis进行数据库访问时的效率。
    MyBatis-Plus提供了一种基于注解的方式来【定义和映射数据库操作】，其中的注解起到了重要作用。


（2）注解介绍
    ①@TableName注解
        语法：@TableName("表名")
        功能：用于映射实体类对应的表名
        注意：①若不添加该注解，则表名默认为类名
             ②表名/字段名不区分大小写

    ②@TableId注解
        语法：@TableId(value="主键列名",type=主键策略)
        功能：用于映射主键，并设置主键策略
        主键策略：①AUTO -> 主键自增长（AUTO_INCREMENT）
                ②ASSIGN_ID（默认） -> 使用雪花算法分配ID
        注意：①若不添加该注解，则主键默认为与表中主键字段名相同的属性
             ②雪花算法，后续即将讲解
             ③可以在application.yml中，配置全局的主键策略

    ③@TableField注解
        语法：@TableField("普通字段名")
        功能：用于映射普通字段
        注意：若不添加该注解，则该属性默认为表中名称相同的字段


（3）雪花算法
    ①介绍
        雪花算法（Snowflake Algorithm）是一种用于生成唯一ID的算法。它由Twitter公司提出，用于解决分布式系统中生成全局唯一ID的需求。
        在传统的自增ID生成方式中，使用单点数据库生成ID会成为系统的瓶颈，而雪花算法通过在分布式系统中生成唯一ID，避免了单点故障和性能瓶颈的问题。
    ②组成部分
        雪花算法生成的ID是一个64位的整数，由以下几个部分组成：
            1. 时间戳：41位，精确到毫秒级，可以使用69年。
            2. 节点ID：10位，用于标识分布式系统中的不同节点。
            3. 序列号：12位，表示在同一毫秒内生成的不同ID的序号。
        通过将这三个部分组合在一起，雪花算法可以在分布式系统中生成全局唯一的ID，并保证ID的生成顺序性。
    ③工作方式
        雪花算法的工作方式如下：
            1. 当前时间戳从某一固定的起始时间开始计算，可以用于计算ID的时间部分。
            2. 节点ID是分布式系统中每个节点的唯一标识，可以通过配置或自动分配的方式获得。
            3. 序列号用于记录在同一毫秒内生成的不同ID的序号，从0开始自增，最多支持4096个ID生成。
        需要注意的是，雪花算法依赖于系统的时钟，需要确保系统时钟的准确性和单调性，否则可能会导致生成的ID不唯一或不符合预期的顺序。
    ④总结
        雪花算法是一种简单但有效的生成唯一ID的算法，广泛应用于分布式系统中，如微服务架构、分布式数据库、分布式锁等场景，以满足全局唯一标识的需求。
        注意: 雪花算法生成的数字,需要使用Long 或者 String类型主键!!


（4）注解案例
    具体代码见：【com.etlpat.pojo.User】