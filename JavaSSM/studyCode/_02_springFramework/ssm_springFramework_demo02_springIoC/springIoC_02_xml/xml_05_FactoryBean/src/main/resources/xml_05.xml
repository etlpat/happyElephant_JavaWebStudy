<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--
        三种创建对象的方式：
            ①通过构造器创建对象（有参/无参）
                <bean id class="指定类名"/>
            ②使用工厂类创建对象（静态/非静态）
                <bean id class="工厂类名" factory-method="工厂方法名">
            ③【使用标准工厂FactoryBean创建对象】
                <bean id class="标准工厂类名">
                注意：由于FactoryBean标准工厂中，工厂方法统一叫做getObject()，因此不需要特地指定factory-method方法名。
    -->

    <!--
        【使用标准工厂FactoryBean创建对象】
        <bean
            id = 被创建对象的id
            class = 标准工厂类的全限定符

        重点：
            ①由于FactoryBean标准工厂中，工厂方法统一叫做getObject()，因此不需要特地指定factory-method方法名。
            ②如下过程，不仅会把产品对象放入ioc容器，【也会将标准工厂对象本身放入ioc容器】。
                产品对象标识：【id】
                标准工厂对象标识：【&id】  （【工厂对象被隐式创建，可以通过&id，找到工厂对象本身！】）
            ③若对标准化工厂型的bean标签进行构造器/Setter的依赖注入：
                结果并非是对产品进行依赖注入，【而是对工厂对象进行依赖注入】。
                （对静态工厂/非静态工厂/标准工厂FactoryBean进行依赖注入，都是对于工厂对象本身进行依赖注入）
                不过，可以通过工厂对象间接对产品进行依赖注入。
    -->
    <bean id="user1" class="com.etlpat.factoryBean.UserFactoryBean"/>


    <!--
        区分FactoryBean 和 BeanFactory区别
            (1)FactoryBean（标准化工厂接口）：是Spring中一种特殊的bean，可以在getObject()工厂方法自定义的逻辑创建Bean！
                是一种能够生产其他Bean的Bean。FactoryBean在容器启动时被创建，而在实际使用时则是通过调用getObject()方法
                来得到其所生产的Bean。因此，FactoryBean可以自定义任何所需的初始化逻辑，生产出一些定制化的bean。
                一般情况下，整合第三方框架，都是通过定义FactoryBean实现！！！
            (2)BeanFactory（ioc容器顶层接口）：是Spring框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理bean的生命周期、
                配置文件的加载和解析、bean的装配和依赖注入等。BeanFactory接口提供了访问bean的方式，例如getBean()方法获取指定的bean实例。
                它可以从不同的来源（例如Mysql数据库、XML文件、Java配置类等）获取bean定义，并将其转换为bean实例。
                同时，BeanFactory还包含很多子类（例如，ApplicationContext接口）提供了额外的强大功能。

            总结：总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建bean的接口，它提供了更加灵活的初始化定制功能，
                 而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。
    -->

</beans>