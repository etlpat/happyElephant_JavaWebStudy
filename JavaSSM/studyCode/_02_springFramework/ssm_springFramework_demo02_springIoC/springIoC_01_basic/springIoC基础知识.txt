<1>springIoC核心容器概念


1.组件和组件管理概念

    (1)什么是组件？
        MVC架构中，常见组件有：控制层组件/服务层组件/持久层组件...
        【组件：即可复用的java对象】


    (2)spring充当组件管理角色(IoC)
        SpringFramework框架，可以帮助我们管理组件。
        spring具体的组件管理动作包含：
            ①组件对象实例化
            ②组件属性属性赋值
            ③组件对象之间引用
            ④组件对象存活周期管理
            ......
        我们只需要编写【配置文件】，告知Spring管理哪些类组件和他们的关系即可！
        注意：组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象！
            - 组件一定是对象
            - 对象不一定是组件


    (3)组件交给Spring管理的优势
        ①降低了组件之间的耦合性：Spring IoC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。
        ②提高了代码的可重用性和可维护性：将组件的实例化过程、依赖关系的管理等功能交给Spring IoC容器处理，使得组件代码更加模块化、可重用、更易于维护。
        ③方便了配置和管理：Spring IoC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。
        ④交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP,声明事务管理）等。





2.SpringIoC容器和容器实现

    (1)普通容器和复杂容器
        ①普通容器：只具备存储的功能，没有更多功能。
            e.g. 数组、List集合、Set集合

        ②复杂容器：不仅具有存储的功能，还包含管理对象生命周期、调用对象等功能。
            e.g. Servlet容器（创建、初始化、处理请求、销毁）
            注意：我们即将学习的 SpringIoC 就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！


    (2)SpringIoC容器介绍
        SpringIoC 容器，负责实例化、配置和组装 bean（组件）。
        容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。
        配置元数据以【XML、Java注解或 Java代码】形式表现。
        它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。



    (3)SpringIoC容器具体接口和实现类
        ①SpringIoC容器体系结构：

                                                       BeanFactory(接口)
                                                              ↑
                |---------------------------------> ApplicationContext(接口) <------------------------------|
                ↑                                     ↑                ↑                                   ↑
ClassPathXmlApplicationContext   FileSystemXmlApplicationContext   AnnotationConfigApplicationContext   WebApplicationContext


        ②BeanFactory接口
            BeanFactory接口提供了配置框架和基本功能。
            它提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIoC容器标准化超接口！


        ③ApplicationContext接口
            ApplicationContext接口是BeanFactory接口的子接口。它在原有基础上，添加了更多特定于企业的功能。
            它扩展了以下功能：
                ①更容易与 Spring 的 AOP 功能集成
                ②消息资源处理（用于国际化）
                ③特定于应用程序给予此接口实现，例如Web 应用程序的 WebApplicationContext


        ④ApplicationContext接口的实现类容器
        ________________________________________________________________________________________________________________
        |  类型名                                 | 简介
        |① ClassPathXmlApplicationContext       | 通过读取【类路径】下的【XML】格式的配置文件创建 IOC 容器对象
        |② FileSystemXmlApplicationContext      | 通过【文件系统路径】读取【XML】格式的配置文件创建 IOC 容器对象
        |③ AnnotationConfigApplicationContext   | 通过读取【Java配置类】创建 IOC 容器对象
        |④ WebApplicationContext                | 专门为【Web应用】准备，基于Web环境创建 IOC 容器对象，并将对象引入存入ServletContext域中



    (4)SpringIoC容器管理配置的方式
        Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式。
        （P.S. 为了迎合当下开发环境，我们将以【java配置类+注解方式】为主进行讲解！）

        ①XML配置方式：
            是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，
            让SpringIoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。

        ②注解方式：
            从Spring2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。
            通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，
            这样SpringIoC容器就可以管理这些Bean之间的依赖关系。

        ③Java配置类方式：【重点】
            从Spring3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。
            Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。





3.Spring IoC / DI概念总结
    (1)IoC容器
        SpringIoC容器，是spring核心容器的别称。
        负责实例化、配置和组装 bean（组件）核心容器。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。
        【SpringIoC容器的两大功能：IoC 和 DI】

    (2)IoC控制反转（Inversion of Control）
        IoC：将对象的创建、管理权限，统一转交给springIoC容器。
        解释：IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，
            不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。
            这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。

    (3)DI依赖注入（Dependency Injection）
        DI：通过构造器/setter等方式，将一个对象注入到另一个对象内部。
        解释：DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，
            这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。
            在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。
            它提供了三种形式的依赖注入：构造函数注入、Setter方法注入和接口注入。





4.springIoC的代码实现步骤
    ① 编写配置信息（xml/注解/java配置类）。
    ② 实例化ioc容器对象，并指定配置信息。
    ③ 在java代码中，通过ioc容器获取对应的组件（对象）。





5.三种配置方式总结
    (1)XML方式配置总结
        1. 所有内容写到xml格式配置文件中
        2. 声明bean通过<bean标签
        3. <bean标签包含基本信息（id,class）和属性信息 <property name value / ref
        4. 引入外部的properties文件可以通过<context:property-placeholder
        5. IoC具体容器实现选择ClassPathXmlApplicationContext对象

    (2)XML+注解方式配置总结
        1. 注解负责标记IoC的类和进行属性装配
        2. xml文件依然需要，需要通过<context:component-scan标签指定注解范围
        3. 标记IoC注解：@Component,@Service,@Controller,@Repository
        4. 标记DI注解：@Autowired @Qualifier @Resource @Value
        5. IoC具体容器实现选择ClassPathXmlApplicationContext对象

    (3)完全注解（java配置类）方式配置总结
        1. 完全注解方式指的是去掉xml文件，使用配置类 + 注解实现
        2. xml文件替换成使用@Configuration注解标记的类
        3. 标记IoC注解：@Component,@Service,@Controller,@Repository
        4. 标记DI注解：@Autowired @Qualifier @Resource @Value
        5. <context:component-scan标签指定注解范围使用@ComponentScan(basePackages = {"com.atguigu.components"})替代
        6. <context:property-placeholder引入外部配置文件使用@PropertySource({"classpath:application.properties","classpath:jdbc.properties"})替代
        7. <bean 标签使用@Bean注解和方法实现
        8. IoC具体容器实现选择AnnotationConfigApplicationContext对象
