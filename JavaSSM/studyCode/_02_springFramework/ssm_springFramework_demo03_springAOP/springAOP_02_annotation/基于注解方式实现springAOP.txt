<2>基于注解方式实现springAOP


1.springAOP基础使用介绍

    (1)springAOP底层技术组成
        ①springAOP框架
        ↓
        ②AspectJ注解层
        |   AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解。
        ↓
        ③具体实现层（动态代理：JDK原生/cglib）
            JDK原生：需要目标类必须实现接口 -- 因为该技术要求代理对象和目标对象实现同样的接口。
            cglib：不需要目标类实现接口 -- 因为该技术通过继承被代理的目标类实现动态代理。


    (2)springAOP的实现步骤
        <1>编写核心代码
            ①在Maven工程的pom.xml中导入依赖（jar包）
            ②正常编写业务代码，如MVC架构中类的编写
            ③为组件类添加IoC/DI注解
            ④创建java配置类，编写配置信息
            ⑤在测试环境中，创建IoC容器，并通过它获取组件对象

        <2>编写切面代码
            ①创建增强类，并补全增强类的注解
            ②在配置文件中，开启AspectJ注解的支持
            ③创建增强方法，定义增强代码
            ④使用注解，指定增强方法的切入位置。
            ⑤配置切点表达式





2.基于注解方式实现springAOP

    (1)基于注解方式实现springAOP的学习
        目标：
            ①创建增强类，并补全增强类的注解 -> @Component / @Aspect
            ②在配置文件中，开启AspectJ注解的支持 -> @EnableAspectJAutoProxy
            ③创建增强方法，定义增强代码 -> （P.S.要根据切入位置，编写对应增强方法）
            ④使用注解，指定增强方法的切入位置 -> @Before / @AfterReturning / @AfterThrowing / @After / @Around
            ⑤配置切点表达式 -> execution(访问修饰符 返回类型 类的全称.方法名(参数列表))
        【见aop_01_basicTest子工程的src/main/java/com/etlpat/advice/LogAdvice.java】


    (2)项目作业--使用springAOP技术，模拟事务的流程（开启/提交/回滚/finally）
        【项目源码见aop_02_homework子工程】





3.spring底层如何实现AOP技术？
    spring底层，通过动态代理（JDK原生/cglib），实现AOP技术。
    spring的动态代理：
        若对目标类使用了AOP技术：【则ioc容器中，不会存放目标类的对象，而是存放由spring生成的代理类对象】！
        ①若目标类有父接口：对应JDK原生动态代理（代理类和目标类是兄弟关系） -> 必须使用【接口引用】接收代理对象！
        ②若目标类没有父接口：对应cglib动态代理（代理类是目标类的子类） -> 只能使用【目标类引用】接收代理对象！

