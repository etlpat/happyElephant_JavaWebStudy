<1>springAOP基础知识


1.知识点补充 -- 代理模式
    (1)代理模式基础
        代理模式是二十三种设计模式中的一种，属于结构型模式。
        它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。
        代理类让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦。
        调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。
        注意：代理在开发中实现的方式具体有两种 -- 静态代理、动态代理

    (2)静态代理
        静态代理(Proxy)模式分为三种角色:
            -抽象主题(Subject)类:通过接口或抽象类声明[真实主题]和[代理对象]实现的业务方法。
            -真实主题(Real Subject)类:实现了抽象主题中的具体业务,是代理对象所代表的真实对象,是最终要引用的对象。
            -代理(Proxy)类:提供了与真实主题相同的接口,其内部含有对真实主题的引用,它可以访问、控制或扩展真实主题的功能。
        注意：代理类中，可以将真实主题类对象作为属性，方便其访问真实主题类的方法。

    (3)动态代理
        动态代理技术分类
            ①JDK动态代理：
                JDK原生的实现方式，需要被代理的目标类必须实现接！
                他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（目标类和代理类：兄弟关系）
            ②cglib：
                通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（目标类和代理类：父子关系）

    (4)代理模式总结
        代理方式可以解决附加功能代码干扰核心代码和不方便统一维护的问题！他主要是将附加功能代码提取到代理中执行，不干扰目标核心代码！
        但是我们也发现，无论使用静态代理和动态代理(jdk,cglib)，程序员的工作都比较繁琐！需要自己编写代理工厂等！
        但是，提前剧透，我们在实际开发中，不需要编写代理代码，我们可以使用[Spring AOP]框架，他会简化动态代理的实现！！！





2.面向切面编程（AOP）基础思维
    (1)面向切面编程思想AOP
        AOP：Aspect Oriented Programming面向切面编程。
        AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。
        AOP是横向的编程思维，它将代码中重复的非核心业务提取到一个公告模块中！最终利用动态代理技术横向插入到各个方法中！【解决非核心代码冗余问题！】


    (2)OOP与AOP
        OOP（纵向关系）：
            OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。
            不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。
            日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，
            这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。

        AOP（横向关系）：
            AOP技术恰恰相反，它利用一种称为"横切"的技术，剖解开封装的对象内部，
            并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为"Aspect"，即切面。
            所谓"切面"，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，
            便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。
            使用AOP，可以在不修改原来代码的基础上添加新功能。


    (3)AOP思想主要的应用场景
        AOP（面向切面编程）是一种编程范式，它通过将通用的横切关注点（如日志、事务、权限控制等）与业务逻辑分离，使得代码更加清晰、简洁、易于维护。AOP可以应用于各种场景，以下是一些常见的AOP应用场景：
            1. 日志记录：在系统中记录日志是非常重要的，可以使用AOP来实现日志记录的功能，可以在方法执行前、执行后或异常抛出时记录日志。
            2. 事务处理：在数据库操作中使用事务可以保证数据的一致性，可以使用AOP来实现事务处理的功能，可以在方法开始前开启事务，在方法执行完毕后提交或回滚事务。
            3. 安全控制：在系统中包含某些需要安全控制的操作，如登录、修改密码、授权等，可以使用AOP来实现安全控制的功能。可以在方法执行前进行权限判断，如果用户没有权限，则抛出异常或转向到错误页面，以防止未经授权的访问。
            4. 性能监控：在系统运行过程中，有时需要对某些方法的性能进行监控，以找到系统的瓶颈并进行优化。可以使用AOP来实现性能监控的功能，可以在方法执行前记录时间戳，在方法执行完毕后计算方法执行时间并输出到日志中。
            5. 异常处理：系统中可能出现各种异常情况，如空指针异常、数据库连接异常等，可以使用AOP来实现异常处理的功能，在方法执行过程中，如果出现异常，则进行异常处理（如记录日志、发送邮件等）。
            6. 缓存控制：在系统中有些数据可以缓存起来以提高访问速度，可以使用AOP来实现缓存控制的功能，可以在方法执行前查询缓存中是否有数据，如果有则返回，否则执行方法并将方法返回值存入缓存中。
            7. 动态代理：AOP的实现方式之一是通过动态代理，可以代理某个类的所有方法，用于实现各种功能。
        综上所述，AOP可以应用于各种场景，它的作用是将通用的横切关注点与业务逻辑分离，使得代码更加清晰、简洁、易于维护。





3.AOP术语名词介绍
    (1)核心关注点/横切关注点
        AOP把软件系统分为两个部分：核心关注点和横切关注点。
            ①核心关注点：即主体业务。
            ②横切关注点：即非核心的，可以从主体中提取出来的业务。（如权限认证、日志、事务、异常等）
        注意：AOP的应用场景就是横切关注点（非核心代码处理场景）。

    (2)增强代码
        增强代码，即横切关注点中，用于增强主体的具体的代码。
        几种位置的增强代码：
            ①前置增强：在被代理的目标方法前执行（try{}中，核心代码前）
            ②返回增强：在被代理的目标方法成功结束后执行（try{}中，核心代码后）
            ③异常增强：在被代理的目标方法异常结束后执行（catch{}中）
            ④最后增强：在被代理的目标方法最终结束后执行（finally{}中）
            ⑤环绕增强：使用try...catch...finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置

    (3)连接点-JoinPoint
        连接点，即可以被增强代码切入的目标方法。
        （指那些被拦截到的点。在Spring中，可以被动态代理拦截目标类的方法）

    (4)切入点-PointCut
        切点，即实际上被真实切入的连接点（被实际切入的方法）。
        （切点是一个表达式，比如execution(* com.spring.service.impl.*.*(..))。符合条件的每个方法都是一个具体的连接点）

    (5)切面-aspect
        切面 = 切点 + 增强代码

    (6)目标-target
        即被代理的目标对象。

    (7)代理-proxy
        即代理对象。

    (8)织入-weave
        织入，即把增强代码添加到切点（并形成代理对象）这一动作。
        （可以在编译期织入，也可以在运行期织入，Spring采用后者）





4.SpringAOP框架介绍和关系梳理
    ①AOP一种区别于OOP的编程思维，用来完善和解决OOP的非核心代码冗余和不方便统一维护问题！
    ②动态代理（JDK原生/cglib）是spring底层实现AOP思维编程的具体技术，若我们自己使用动态代理实现代码比较繁琐！
    ③Spring AOP框架，基于AOP编程思维，封装动态代理技术，简化动态代理技术实现的框架！
        SpringAOP内部帮助我们实现动态代理，我们只需写少量的配置，指定生效范围即可,即可完成面向切面思维编程的实现！
