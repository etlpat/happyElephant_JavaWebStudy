<2>Maven的依赖管理与构建管理


1.Maven依赖管理

    (1)依赖(jar包)管理概念
        Maven 依赖管理是 Maven 软件中最重要的功能之一。Maven 的依赖管理能够帮助开发人员自动解决软件包依赖问题，
            使得开发人员能够轻松地将其他开发人员开发的模块或第三方框架集成到自己的应用程序或模块中，避免出现版本冲突和依赖缺失等问题。
        我们通过定义 POM 文件，Maven 能够【自动解析】项目的依赖关系，并通过 Maven仓库自动下载和管理依赖，
            从而避免了手动下载和管理依赖的繁琐工作和可能引发的版本冲突问题。


    (2)依赖(jar包)管理代码
        依赖管理，即为Maven工程导入jar包（依赖项）。
        【依赖管理代码，见maven_01_dependencyManagement模块的pom.xml文件】


    (3)依赖传递和依赖冲突
        [1]依赖传递
            ①依赖传递概念：
                依赖传递，指的是当一个模块或库 A 依赖于另一个模块或库 B，而 B 又依赖于模块或库 C，那么 A 会间接依赖于 C。
                这种依赖传递结构可以形成一个依赖树。当我们引入一个库或框架时，
                构建工具（如 Maven、Gradle）会【自动解析和加载】其【所有的直接和间接依赖】，确保这些依赖都可用。

            ②依赖传递的作用：
                1. 减少重复依赖：当多个项目依赖同一个库时，Maven 可以自动下载并且只下载一次该库。这样可以减少项目的构建时间和磁盘空间。
                2. 自动管理依赖: Maven 可以自动管理依赖项，使用依赖传递，简化了依赖项的管理，使项目构建更加可靠和一致。
                3. 确保依赖版本正确性：通过依赖传递的依赖，之间都不会存在版本兼容性问题，确实依赖的版本正确性！

        [2]依赖冲突
            ①依赖冲突概念：
                当直接引用或者间接引用出现了相同的jar包! 这时呢，一个项目就会出现相同的【重复jar包】，这就算作冲突！
                依赖冲突【避免出现重复依赖】，并且【直接终止依赖传递】！

            ②依赖冲突的解决方式：（如何选择重复的依赖）
                Ⅰ当依赖路径长度不同时：最短依赖路径优先原则（选最短的）
                Ⅱ当依赖路径长度相同时：先声明优先原则（选靠上的）




2.Maven构建管理

    (1)Maven项目构建的概念
        项目构建是指将【源代码、依赖库和资源文件】等转换成【可执行或可部署的应用程序】的过程。


    (2)构建过程
        清理 -> 编译 -> 测试 -> 报告 -> 打包 -> 部署

        主动触发场景：
            ①重新编译：编译不充分, 部分文件没有被编译!
            ②打包：独立部署到外部服务器软件,打包部署。
            ③部署本地或者私服仓库：maven工程加入到本地或者私服仓库,供其他工程使用。
        注意：jar包的部署，指的是将jar包部署到本地的jar包仓库。


    (3)Maven项目构建命令
        （P.S.以下命令需要和pom.xml在同一层级下的cmd中使用）
        语法: mvn 构建命令1 构建命令2....
       ______________________________________________________________
       |  命令            |描述
       |① mvn clean     |清理：清理编译或打包后的项目结构,即删除target文件夹
       |② mvn compile   |编译：编译项目，生成target文件
       |③ mvn test      |测试：执行测试源码
       |④ mvn site      |报告：生成一个项目依赖信息的展示页面
       |⑤ mvn package   |打包：打包项目，生成war / jar 文件
       |⑥ mvn install   |部署1：打包后上传到maven本地仓库(本地部署)
       |⑥ mvn deploy    |部署2：只打包，上传到maven私服仓库(私服部署)


    (4)idea可视化界面进行构建管理
        步骤：①Maven选项 -> ②找到所需项目 -> ③点击lifecycle，选择执行命令


    (5)构建命令周期
        ①命令周期概念
            构建命令周期，可以理解成是一组固定构建命令的有序集合，
            【触发周期内靠后的命令，会自动触发周期内靠前的其它命令！】这是一种简化构建的思路!

        ②命令的三类周期
            <1>清理周期：主要是对项目编译生成文件进行清理
                包含命令：clean
            <2>默认周期：定义了真正构件时所需要执行的所有步骤，它是生命周期中最核心的部分
                包含命令：compile - test - package - install/deploy
            <3>报告周期
                包含命令：site

        ③最佳使用方案
         （P.S.由于执行周期内靠后的命令，会自动执行其它靠前的命令，因此有以下最佳执行方案）
            打包: mvn clean package
            重新编译: mvn clean compile
            本地部署: mvn clean install


    (6)周期、命令、插件
        ①周期、命令、插件间的关系：
            周期 → 包含若干命令 → 包含若干插件
            （P.S.无论执行什么命令，本质上是执行对应的一组插件）

       ②手动配置插件：
        以配置jdk17对应的war包打包插件为例：
       ```在pom.xml中：
           <build>
              <!-- jdk17 和 war包版本插件不匹配 -->
               <plugins>
                   <plugin>
                       <groupId>org.apache.maven.plugins</groupId>
                       <artifactId>maven-war-plugin</artifactId>
                       <version>3.2.2</version>
                   </plugin>
               </plugins>
           </build>
       ```