文档地址：https://www.wolai.com/v5Kuct5ZtPeVBk4NBUGBWF

<1>maven基础


1.Maven介绍
    Maven 是一款为 Java 项目构建管理、依赖管理的工具（**软件**），
    使用 Maven 可以自动化构建、测试、打包和发布项目，大大提高了开发效率和质量。



2.Maven功能
    (1)场景概念
        场景1：例如我们项目需要第三方库（依赖），如Druid连接池、MySQL数据库驱动和Jackson等。
            那么我们可以将需要的依赖项的信息编写到Maven工程的配置文件，Maven软件就会自动下载并复制这些依赖项到项目中，
            也会自动下载依赖需要的依赖！确保依赖版本正确无冲突和依赖完整！
        场景2：项目开发完成后，想要将项目打成.war文件，并部署到服务器中运行，
        使用Maven软件，我们可以通过一行构建命令（mvn package）快速项目构建和打包！节省大量时间！

    (2)依赖管理
        Maven 可以管理项目的依赖，包括自动下载所需依赖库、自动下载依赖需要的依赖并且保证版本没有冲突、依赖版本管理等。
        通过 Maven，我们可以方便地维护项目所依赖的外部库，而我们仅仅需要编写配置即可。

    (3)构建管理
        项目构建是指将源代码、配置文件、资源文件等转化为能够运行或部署的应用程序或库的过程！
        Maven 可以管理项目的编译、测试、打包、部署等构建过程。通过实现标准的构建生命周期，
        Maven 可以确保每一个构建过程都遵循同样的规则和最佳实践。
        同时，Maven 的插件机制也使得开发者可以对构建过程进行扩展和定制。主动触发构建，只需要简单的命令操作即可。



3.Maven工程的4个属性（G、A、V、P）
    (0)概念
        Maven 中的 GAVP 是指 GroupId(组ID)、ArtifactId(工件ID)、Version(版本号)、Packaging(打包格式) 等四个属性的缩写，
        其中前三个是必要的，而 Packaging 属性为可选项。
        这四个属性主要为每个项目在maven仓库总做一个标识，类似人的《姓-名》。
        有了具体标识，方便maven软件对项目进行管理和互相引用！

    (1)GAV遵循以下规则
      1） GroupID 格式：com.{公司/BU }.业务线.[子业务线]，最多 4 级。
        说明：{公司/BU} 例如：alibaba/taobao/tmall/aliexpress 等 BU 一级；子业务线可选。
        正例：com.taobao.tddl 或 com.alibaba.sourcing.multilang  com.atguigu.java

      2） ArtifactID 格式：产品线名-模块名。语义不重复不遗漏，先到仓库中心去查证一下。
        正例：tc-client / uic-api / tair-tool / bookstore

      3） Version版本号格式推荐：主版本号.次版本号.修订号 1.0.0
        1） 主版本号：当做了不兼容的 API 修改，或者增加了能改变产品方向的新功能。
        2） 次版本号：当做了向下兼容的功能性新增（新增类、接口等）。
        3） 修订号：修复 bug，没有修改方法签名的功能加强，保持 API 兼容性。
        例如： 初始→1.0.0  修改bug → 1.0.1  功能调整 → 1.1.1等

    (2)Packaging定义规则：
      指示将项目打包为什么类型的文件，idea根据packaging值，识别maven项目类型！
      packaging 属性为 jar（默认值），代表普通的Java工程，打包以后是.jar结尾的文件。
      packaging 属性为 war，代表Java的web工程，打包以后.war结尾的文件。
      packaging 属性为 pom，代表不会打包，用来做继承的父工程。



4.Maven工程项目结构
    以下是Maven工程的项目结构：
        |-- pom.xml                               # Maven 项目管理文件
        |-- src
            |-- main                              # 项目主要代码
            |   |-- java                          # Java 源代码目录
            |   |   `-- com/example/myapp         # 开发者代码主目录
            |   |       |-- controller            # 存放 Controller 层代码的目录
            |   |       |-- service               # 存放 Service 层代码的目录
            |   |       |-- dao                   # 存放 DAO 层代码的目录
            |   |       `-- model                 # 存放数据模型的目录
            |   |-- resources                     # 资源目录，存放配置文件、静态资源等
            |   |   |-- log4j.properties          # 日志配置文件
            |   |   |-- spring-mybatis.xml        # Spring Mybatis 配置文件
            |   |   `-- static                    # 存放静态资源的目录
            |   |       |-- css                   # 存放 CSS 文件的目录
            |   |       |-- js                    # 存放 JavaScript 文件的目录
            |   |       `-- images                # 存放图片资源的目录
            |   `-- webapp                        # 存放 WEB 相关配置和资源
            |       |-- WEB-INF                   # 存放 WEB 应用配置文件
            |       |   |-- web.xml               # Web 应用的部署描述文件
            |       |   `-- classes               # 存放编译后的 class 文件
            |       `-- index.html                # Web 应用入口页面
            `-- test                              # 项目测试代码
                |-- java                          # 单元测试目录
                `-- resources                     # 测试资源目录

    如下是常用的文件：
        - pom.xml：Maven 项目管理文件，用于描述项目的依赖和构建配置等信息。
        - src/main/java：存放项目的 Java 源代码。
        - src/main/resources：存放项目的资源文件，如配置文件、静态资源等。
        - src/main/webapp/WEB-INF：存放 Web 应用的配置文件。
        - src/main/webapp/index.html：Web 应用的入口页面。
        - src/test/java：存放项目的测试代码。
        - src/test/resources：存放测试相关的资源文件，如测试配置文件等。