// JS语法--运算符
//
//
// (1)JS运算符
//  1.运算      + - * / %
//  2.复合运算  ++ -- += -= *= /= %=
//  3.关系      > < >= <= != ==【判断弱类型是否相等】 ===【判断强类型是否相等】
//  4.逻辑      || &&
//  5.三目      ? :
//  3.位        | & ^ << >> >>>【无符号右移】
//
//
// (2)运算符优先级：
//  优先级：单目>算数>位移>关系>逻辑>三目>赋值
//	++	--	!
//	*	/	%
//	+	-
//	<<	>>	>>>
//	<	>	<=	>=
//	==  === !=
//	&
//	^
//	|
//	&&
//	||
//	? :
//	=	*=	/=	%=
//	+=	-=	<<=	>>=
//	&=	^=	|=	>>>=
//
//
//
// (3)注意事项
//  1.JS数字的运算，是弱类型的运算
//      如：10/4，结果为2.5
//          10/0，结果为Infinity（无穷）
//          10%0，比较特殊，结果为NaN
//  2.==和===
//      ==表示弱类型的是否相等（若两端的数据类型不一致，尝试将两端数据都转化为number，再判断是否相等）
//      ===表示强类型的是否相等
//   e.g.1 == 1 为 true
//       1 === 1 为 true
//       1 == "1" 为 true
//       1 === "1" 为 false
//       1 == true 为 true
//       1 === true 为 false

// js算术运算符，是弱类型数字的运算
console.log(10 / 2); // 5
console.log(10 / 4); // 2.5
console.log(10 / 0); // Infinity（中文：无穷）
console.log(10 % 0); // NaN（NaN=NotANumber表示不是数字）
console.log("-------------------");

// js中，==判断弱类型是否相等，===判断强类型是否相等
console.log(1 == 1); // true
console.log(1 == "1"); // true
console.log(1 == true); // true
console.log(10 == true); // false
console.log(1 === 0); // false
console.log(1 === 1); // true
console.log(1 === "1"); // false
console.log(1 === true); // false
console.log("-------------------");
